package com.r2development.leveris.tdd.borrower;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.client.BasicCookieStore;

import java.io.IOException;
import java.util.Base64;
import java.util.LinkedHashMap;

import static com.r2development.leveris.utils.HttpUtils.createHttpClient;
import static com.r2development.leveris.utils.HttpUtils.requestHttpPost;
import static org.junit.Assert.assertNotNull;

/**
 * Created by anthonymottot on 08/03/2016.
 */
public class MdgTest {

    public static void main(String... args) throws IOException {

        System.out.println("/queryenail filter email");
        HttpClient httpClient = createHttpClient();

        CookieStore cookieStore = new BasicCookieStore();
        HttpClientContext localContext = HttpClientContext.create();
        localContext.setCookieStore(cookieStore);

        String queryEmailResponse = requestHttpPost(
            httpClient,
            "https://dv2mdg.opoqodev.com/queryemail",
            new LinkedHashMap<String, String>() {
                {
                    put("Content-Type", "application/json");
                    put("Accept", "application/json");
                }
            },
            "{\"to\": \"test.automation.payday20160310152743651@test.finfactory.com\"}",
            localContext,
            false
        );

        JsonParser jsonParserQueryEmailResponse = new JsonParser();
        JsonObject jsonObjectQueryEmailResponse = (JsonObject) jsonParserQueryEmailResponse.parse(queryEmailResponse.substring(1, queryEmailResponse.length()-1));
//        JsonObject jsonObjectQueryEmailResponse = (JsonObject) jsonParserQueryEmailResponse.parse(queryEmailResponse);

        String emailId = jsonObjectQueryEmailResponse.get("_id").getAsString();
        assertNotNull("emailId should n't be null", emailId);
        System.out.println("emailId: " + emailId);


        String queryEmailDetailResponse = requestHttpPost(
                httpClient,
                "https://dv2mdg.opoqodev.com/queryemail/detail",
                new LinkedHashMap<String, String>() {
                    {
                        put("Content-Type", "application/json");
                        put("Accept", "application/json");
                    }
                },
                "{\"ids\":[\"" + emailId + "\"]}",
                localContext,
                false
        );

        JsonParser jsonParserQueryEmailDetailResponse = new JsonParser();
        JsonObject jsonObjectQueryEmailDetailResponse = (JsonObject) jsonParserQueryEmailDetailResponse.parse(queryEmailDetailResponse.substring(1, queryEmailDetailResponse.length()-1));

        String bodyEmail = jsonObjectQueryEmailDetailResponse.get("body").getAsString();
        JsonArray toEmailId = jsonObjectQueryEmailDetailResponse.get("to").getAsJsonArray();

        assertNotNull("emailId should n't be null", emailId);
        System.out.println("email body: " + new String(Base64.getDecoder().decode(bodyEmail.getBytes())));
        System.out.println("to: " + toEmailId);

        // Extravct Url .....

        String querySmsResponse = requestHttpPost(
                httpClient,
                "https://dv2mdg.opoqodev.com/querysms",
                new LinkedHashMap<String, String>() {
                    {
                        put("Content-Type", "application/json");
                        put("Accept", "application/json");
                    }
                },
                "{\"to\": \"+4201457620079\"}", // TODO, input parameters generated by Automation Framework with Epoch value
                localContext,
                false
        );

        JsonParser jsonParserQuerySmsResponse = new JsonParser();
        JsonObject jsonObjectQuerySmsResponse = (JsonObject) jsonParserQuerySmsResponse.parse("{\"listSms\":" + querySmsResponse + "}");
//        JsonObject jsonObjectQueryEmailResponse = (JsonObject) jsonParserQueryEmailResponse.parse(queryEmailResponse);

        JsonArray smsId = jsonObjectQuerySmsResponse.get("listSms").getAsJsonArray();
        assertNotNull("smsId should n't be null", smsId);
        System.out.println("smsId: " + smsId);

        JsonObject jsonSmsId = smsId.get(0).getAsJsonObject();
        String theSmsId = jsonSmsId.get("_id").getAsString();

        String querySmsDetailResponse = requestHttpPost(
                httpClient,
                "https://dv2mdg.opoqodev.com/querysms/detail",
                new LinkedHashMap<String, String>() {
                    {
                        put("Content-Type", "application/json");
                        put("Accept", "application/json");
                    }
                },
//                "{\"ids\":[\"" + 56dd47bc2300002c00eeb75b + "\"]}",
                "{\"ids\":[\""+ theSmsId + "\"]}",
                localContext,
                false
        );

        JsonParser jsonParserQuerySmsDetailResponse = new JsonParser();
        JsonObject jsonObjectQuerySmsDetailResponse = (JsonObject) jsonParserQuerySmsDetailResponse.parse(querySmsDetailResponse.substring(1, querySmsDetailResponse.length()-1));

        String bodySms = jsonObjectQuerySmsDetailResponse.get("body").getAsString();
        String toSmsId = jsonObjectQuerySmsDetailResponse.get("_id").getAsString();

        assertNotNull("bodySms should n't be null", bodySms);
        assertNotNull("bodySms should n't be null", toSmsId);
        System.out.println("sms body: " + new String(Base64.getDecoder().decode(bodySms.getBytes())));
        System.out.println("to: " + toSmsId);
    }
}
